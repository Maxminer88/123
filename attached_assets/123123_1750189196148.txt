import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import math
import random

load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã)
user_states = {}

# –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_scores = {}

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
quiz_questions = [
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –í–í–ü?",
        "options": ["–ê) –í–∞–ª–æ–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç", "–ë) –í–∞–ª–æ–≤–æ–π –≤–Ω–µ—à–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç", "–í) –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≤–∞–ª–æ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç"],
        "answer": "–ê"
    },

    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–ª–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã?",
        "options": ["–ê) –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—É—Ä—Å", "–ë) –°–≤–æ–±–æ–¥–Ω–æ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞", "–í) –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—É—Ä—Å–∞"],
        "answer": "–ë"
    },
    {
        "question": "–ö–∞–∫–æ–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–µ–∂–∞—é—â–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º?",
        "options": ["–ê) –£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã", "–ë) –ò–Ω–¥–µ–∫—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–í) –ò–Ω—Ñ–ª—è—Ü–∏—è"],
        "answer": "–ë"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–∞–ª—é—Ç–Ω—ã–π –∫—É—Ä—Å?",
        "options": ["–ê) –¶–µ–Ω–∞ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞—Ö –¥—Ä—É–≥–æ–π", "–ë) –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ —Å—Ç—Ä–∞–Ω–µ", "–í) –†–µ–π—Ç–∏–Ω–≥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤"],
        "answer": "–ê"
    },
    {
        "question": "–ö–∞–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏?",
        "options": ["–ê) –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–ë) –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–Ω—Ñ–ª—è—Ü–∏—é", "–í) –°–Ω–∏–∂–∞–µ—Ç —Å–ø—Ä–æ—Å –Ω–∞ –∫—Ä–µ–¥–∏—Ç"],
        "answer": "–ê"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª?",
        "options": ["–ê) –ü–µ—Ä–∏–æ–¥—ã —Ä–æ—Å—Ç–∞ –∏ —Å–ø–∞–¥–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏", "–ë) –£—Å—Ç–æ–π—á–∏–≤–æ–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ", "–í) –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω"],
        "answer": "–ê"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω?",
        "options": ["–ê) –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω", "–ë) –ö–æ–ª–µ–±–∞–Ω–∏–µ –≤–∞–ª—é—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞", "–í) –¢–µ–º–ø —Ä–æ—Å—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏"],
        "answer": "–ê"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—è–∑–Ω—ë–Ω–Ω–æ—Å—Ç—å?",
        "options": ["–ê) –†–æ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", "–ë) –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —ç–∫–æ–ª–æ–≥–∏–∏", "–í) –í–ª–∏—è–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–∞ –ø—Ä–∏—Ä–æ–¥—É"],
        "answer": "–í"
    },
    {
        "question": "–ö–∞–∫–æ–π —Å—Ç–∏–º—É–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π?",
        "options": ["–ê) –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤", "–ë) –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤", "–í) –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫"],
        "answer": "–ê"
    },
    {
        "question": "–ß—Ç–æ –∏–∑–º–µ—Ä—è–µ—Ç —Å—Ç–∞–≤–∫–∏ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è?",
        "options": ["–ê) –£—Å–ª–æ–≤–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è", "–ë) –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–Ω–µ–≥ –¥–ª—è –±–∞–Ω–∫–æ–≤", "–í) –£—Ä–æ–≤–µ–Ω—å –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏–π"],
        "answer": "–ë"
    },
    {
        "question": "–ö–∞–∫–æ–µ –∏–∑ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤–µ—Ä–Ω–æ –¥–ª—è –º–æ–Ω–µ—Ç–∞—Ä–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏?",
        "options": ["–ê) –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –Ω–∞–ª–æ–≥–∏", "–ë) –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –¥–µ–Ω–µ–∂–Ω—É—é –º–∞—Å—Å—É", "–í) –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"],
        "answer": "–ë"
    },
    
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –í–í–ü?",
        "options": ["–ê) –í–∞–ª–æ–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç", "–ë) –í–∞–ª–æ–≤–æ–π –≤–Ω–µ—à–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç", "–í) –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≤–∞–ª–æ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç"],
        "answer": "–ê"
    },
    {
        "question": "–ö–∞–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –≤ –†–æ—Å—Å–∏–∏?",
        "options": ["–ê) –ú–∏–Ω—Ñ–∏–Ω", "–ë) –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫", "–í) –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ"],
        "answer": "–ë"
    },
    {
        "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ä–æ—Å—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏?",
        "options": ["–ê) –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω", "–ë) –†–æ—Å—Ç —Ü–µ–Ω", "–í) –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω"],
        "answer": "–ë"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ—Ñ–ª—è—Ü–∏—è?",
        "options": ["–ê) –†–æ—Å—Ç —Ü–µ–Ω", "–ë) –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω", "–í) –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω"],
        "answer": "–ë"
    },
    {
        "question": "–ö–∞–∫–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—É?",
        "options": ["–ê) –£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã", "–ë) –ò–Ω–¥–µ–∫—Å —Ü–µ–Ω", "–í) –í–∞–ª—é—Ç–Ω—ã–π –∫—É—Ä—Å"],
        "answer": "–ê"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–≤–∞–ª—å–≤–∞—Ü–∏—è —Ä—É–±–ª—è?",
        "options": ["–ê) –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ä—É–±–ª—è", "–ë) –û—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ä—É–±–ª—è", "–í) –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞"],
        "answer": "–ë"
    },
    {
        "question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –≤ —Å—Ç—Ä–∞–Ω–µ?",
        "options": ["–ê) –í–ù–ü", "–ë) –í–í–ü", "–í) –ù–î"],
        "answer": "–ë"
    },
    {
        "question": "–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω?",
        "options": ["–ê) –î–∏–Ω–∞–º–∏–∫—É —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏", "–ë) –£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã", "–í) –û–±—ä—ë–º —ç–∫—Å–ø–æ—Ä—Ç–∞"],
        "answer": "–ê"
    },
    {
        "question": "–ö–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –≤ –º–∏—Ä–µ?",
        "options": ["–ê) –ï–≤—Ä–æ", "–ë) –î–æ–ª–ª–∞—Ä –°–®–ê", "–í) –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç"],
        "answer": "–ë"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ—Ü–µ—Å—Å–∏—è?",
        "options": ["–ê) –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç", "–ë) –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Å–ø–∞–¥", "–í) –°—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞"],
        "answer": "–ë"
    },
    {
        "question": "–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–æ–π –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏?",
        "options": ["–ê) –ú–∏–Ω–∏—Å—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤", "–ë) –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –¶–ë –†–§", "–í) –ü—Ä–µ–º—å–µ—Ä-–º–∏–Ω–∏—Å—Ç—Ä"],
        "answer": "–ë"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–∏—Å–∫–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞?",
        "options": ["–ê) –ü–æ–ª–∏—Ç–∏–∫–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–∞–ª–æ–≥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤", "–ë) –î–µ–Ω–µ–∂–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞", "–í) –¢–æ—Ä–≥–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞"],
        "answer": "–ê"
    },
    {
        "question": "–ö–∞–∫–æ–π –Ω–∞–ª–æ–≥ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º?",
        "options": ["–ê) –ù–î–°", "–ë) –ü–æ–¥–æ—Ö–æ–¥–Ω—ã–π –Ω–∞–ª–æ–≥", "–í) –ê–∫—Ü–∏–∑"],
        "answer": "–ë"
    },
    {
        "question": "–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –î–∂–∏–Ω–∏?",
        "options": ["–ê) –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ñ–ª—è—Ü–∏–∏", "–ë) –ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–æ–≤", "–í) –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç"],
        "answer": "–ë"
    },
    {
        "question": "–ö–∞–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –í–í–ü –†–æ—Å—Å–∏–∏?",
        "options": ["–ê) –†–æ—Å—Å—Ç–∞—Ç", "–ë) –¶–ë –†–§", "–í) –ú–∏–Ω—ç–∫–æ–Ω–æ–º—Ä–∞–∑–≤–∏—Ç–∏—è"],
        "answer": "–ê"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ?",
        "options": ["–ê) –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ—Å—Ç–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", "–ë) –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –í–í–ü", "–í) –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏"],
        "answer": "–ë"
    },
    {
        "question": "–ö–∞–∫–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–∞–ª—é—Ç—ã?",
        "options": ["–ê) –ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π –∫—É—Ä—Å", "–ë) –†–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å", "–í) –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å"],
        "answer": "–ë"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–∞–≥—Ñ–ª—è—Ü–∏—è?",
        "options": ["–ê) –†–æ—Å—Ç + –∏–Ω—Ñ–ª—è—Ü–∏—è", "–ë) –°–ø–∞–¥ + –¥–µ—Ñ–ª—è—Ü–∏—è", "–í) –°—Ç–∞–≥–Ω–∞—Ü–∏—è + –∏–Ω—Ñ–ª—è—Ü–∏—è"],
        "answer": "–í"
    },
    {
        "question": "–ö–∞–∫–æ–π –≤–∏–¥ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã —Å–≤—è–∑–∞–Ω —Å –ø–æ–∏—Å–∫–æ–º –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã?",
        "options": ["–ê) –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è", "–ë) –§—Ä–∏–∫—Ü–∏–æ–Ω–Ω–∞—è", "–í) –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è"],
        "answer": "–ë"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å?",
        "options": ["–ê) –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –¥–µ–Ω—å–≥–∏", "–ë) –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", "–í) –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞"],
        "answer": "–ê"
    }
]

# –§—É–Ω–∫—Ü–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async def quiz_question(update: Update):
    user_id = update.effective_user.id
    question = random.choice(quiz_questions)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {
        'mode': 'quiz',
        'current_question': question
    }
    
    text = f"üñãÔ∏è –í–æ–ø—Ä–æ—Å:\n{question['question']}\n\n"
    for option in question['options']:
        text += f"{option}\n"
    text += f"\n–û—Ç–≤–µ—Ç—å—Ç–µ –±—É–∫–≤–æ–π (–ê, –ë –∏–ª–∏ –í)"
    await update.message.reply_text(text)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
async def check_quiz_answer(update: Update, user_answer: str):
    user_id = update.effective_user.id
    username = update.effective_user.first_name or "–ê–Ω–æ–Ω–∏–º"
    
    if user_id not in user_states or user_states[user_id]['mode'] != 'quiz':
        return False
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in user_scores:
        user_scores[user_id] = {
            'name': username,
            'correct': 0,
            'incorrect': 0,
            'total': 0
        }
    
    correct_answer = user_states[user_id]['current_question']['answer']
    user_answer = user_answer.upper().strip()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_scores[user_id]['total'] += 1
    
    if user_answer == correct_answer:
        user_scores[user_id]['correct'] += 1
        score = user_scores[user_id]
        percentage = round((score['correct'] / score['total']) * 100, 1)
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ\n\n"
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
            f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%"
        )
    else:
        user_scores[user_id]['incorrect'] += 1
        score = user_scores[user_id]
        percentage = round((score['correct'] / score['total']) * 100, 1)
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n"
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
            f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%"
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_states[user_id]
    return True

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
async def show_leaderboard(update: Update):
    if not user_scores:
        await update.message.reply_text("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –∑–∞—Ç–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
    sorted_users = sorted(
        user_scores.items(),
        key=lambda x: (x[1]['correct'] / max(x[1]['total'], 1), x[1]['correct']),
        reverse=True
    )
    
    leaderboard_text = "üèÜ –¢–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
    
    for i, (user_id, score) in enumerate(sorted_users[:10], 1):
        percentage = round((score['correct'] / score['total']) * 100, 1)
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        
        leaderboard_text += (
            f"{medal} {score['name']}\n"
            f"   ‚úÖ {score['correct']}/{score['total']} ({percentage}%)\n\n"
        )
    
    await update.message.reply_text(leaderboard_text)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def show_personal_stats(update: Update):
    user_id = update.effective_user.id
    
    if user_id not in user_scores:
        await update.message.reply_text(
            "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!"
        )
        return
    
    score = user_scores[user_id]
    percentage = round((score['correct'] / score['total']) * 100, 1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    sorted_users = sorted(
        user_scores.items(),
        key=lambda x: (x[1]['correct'] / max(x[1]['total'], 1), x[1]['correct']),
        reverse=True
    )
    
    position = next((i for i, (uid, _) in enumerate(sorted_users, 1) if uid == user_id), 0)
    
    stats_text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë§ –ò–º—è: {score['name']}\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['incorrect']}\n"
        f"üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%\n"
        f"üèÜ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {position} –∏–∑ {len(user_scores)}"
    )
    
    await update.message.reply_text(stats_text)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—É–ª
async def show_formulas(update: Update):
    formulas = (
        "üìê –û—Å–Ω–æ–≤–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã:\n\n"
        "üí∞ –ò–Ω–¥–µ–∫—Å –∏–Ω—Ñ–ª—è—Ü–∏–∏:\n"
        "I = (P‚ÇÅ / P‚ÇÄ) √ó 100%\n\n"
        "üìà –¢–µ–º–ø —Ä–æ—Å—Ç–∞ –í–í–ü:\n"
        "T = ((–í–í–ü‚ÇÅ - –í–í–ü‚ÇÄ) / –í–í–ü‚ÇÄ) √ó 100%\n\n"
        "üè¶ –°–ª–æ–∂–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã:\n"
        "S = P √ó (1 + r)‚Åø\n\n"
        "üìä –≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞:\n"
        "E = (ŒîQ/Q) / (ŒîP/P)\n\n"
        "üí∏ –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä:\n"
        "k = 1 / (1 - MPC)"
    )
    await update.message.reply_text(formulas)

# –§—É–Ω–∫—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
async def calculate(update: Update, expression: str):
    try:
        # –ó–∞–º–µ–Ω–∞ sqrt –∏ log –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        safe_expr = expression.replace("sqrt", "math.sqrt").replace("log", "math.log")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
        allowed_names = {
            k: v for k, v in math.__dict__.items() if not k.startswith("__")
        }
        allowed_names.update({"__builtins__": {}})
        
        result = eval(safe_expr, allowed_names)
        await update.message.reply_text(f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {expression} = {result}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏: {str(e)}")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_keyboard():
    buttons = [
        ["–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ üìàüìä"],["–°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤ üìö", "–ö—É—Ä—Å –ª–µ–∫—Ü–∏–π üìí"],
        ["–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è üñãÔ∏èüìÉ", "–¢–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤ üìΩÔ∏èüó£Ô∏è"],["–†–µ–π—Ç–∏–Ω–≥ üèÜ", "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä"],
        ["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üßÆ", "–§–æ—Ä–º—É–ª—ã üìê"],        ["–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ üì∞", "–°–ø—Ä–∞–≤–∫–∞ ‚ùì"]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏ —ç–∫–æ–Ω–æ–º–∏–∫–µ. –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    if user_id in user_states and user_states[user_id]['mode'] == 'quiz':
                if text.upper().strip() in ['–ê', '–ë', '–í', 'A', 'B', 'C']:
                    await check_quiz_answer(update, text)
                    return
                else:
                    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –±—É–∫–≤–æ–π –ê, –ë –∏–ª–∏ –í")
                    return

    if text == "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ üìàüìä":
        await update.message.reply_text(
        "üîó –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:\n"
        "1. –†–æ—Å—Å—Ç–∞—Ç: https://rosstat.gov.ru\n"
        "2. –ú–∏–Ω—Ñ–∏–Ω –†–§: https://minfin.gov.ru\n"
        "3. –¶–ë –†–§: https://cbr.ru\n"
        "4. –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–µ –∫–∞–∑–Ω–∞—á–µ–π—Å—Ç–≤–æ: https://roskazna.gov.ru\n"
        "5. –°—á–µ—Ç–Ω–∞—è –ø–∞–ª–∞—Ç–∞: https://ach.gov.ru"
    )
    elif text == "–†–µ–π—Ç–∏–Ω–≥ üèÜ":
         await show_leaderboard(update)
    elif text == "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä":
          await show_personal_stats(update)
    elif text == "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üßÆ":
         await update.message.reply_text(
        "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2+2 –∏–ª–∏ 100*1.05 –∏–ª–∏ sqrt(16)\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ +, -, *, / - –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
        "‚Ä¢ ** - –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å\n"
        "‚Ä¢ sqrt(x) - –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å\n"
        "‚Ä¢ log(x) - –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –ª–æ–≥–∞—Ä–∏—Ñ–º"
    )
    elif text == "–§–æ—Ä–º—É–ª—ã üìê":
        await show_formulas(update)
    elif text == "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ üì∞":
        await update.message.reply_text(
        "üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n"
        "üîó –†–ë–ö: https://www.rbc.ru/economics/\n"
        "üîó –í–µ–¥–æ–º–æ—Å—Ç–∏: https://www.vedomosti.ru/economics/\n"
        "üîó –ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç: https://www.kommersant.ru/economics\n"
        "üîó –ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å: https://www.interfax.ru/business/"
    )
    elif text == "–°–ø—Ä–∞–≤–∫–∞ ‚ùì":
        await update.message.reply_text(
        "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏–∑—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —ç–∫–æ–Ω–æ–º–∏–∫—É.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:\n"
        "üìà –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ - –≤–∞–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n"
        "üìö –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤ - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è\n"
        "üìí –ö—É—Ä—Å –ª–µ–∫—Ü–∏–π - —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        "üñãÔ∏è –ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è - –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å –æ—Ü–µ–Ω–∫–∞–º–∏\n"
        "üèÜ –†–µ–π—Ç–∏–Ω–≥ - —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã\n"
        "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "üìΩÔ∏è –¢–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤ - –∏–¥–µ–∏ –¥–ª—è —Ä–∞–±–æ—Ç\n"
        "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è\n"
        "üìê –§–æ—Ä–º—É–ª—ã - —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã\n"
        "üì∞ –ù–æ–≤–æ—Å—Ç–∏ - —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
    )
    elif any(op in text for op in ["+", "-", "*", "/", "sqrt", "log"]):
         await calculate(update, text)

def main():
    if not TOKEN:
        print("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()